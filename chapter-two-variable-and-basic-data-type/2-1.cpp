#include <iostream>

using namespace std;

/*
	第二章 第一讲 ：基本内置类型
*/
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 2.1.1 算术类型 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// -------------- sizeof关键字 -------------------
void sizeof_guanjianzi() {
	int a = 100;
	// 计算整型变量a的内存占用大小，这里单位为字节
	int b = sizeof(a); 
	// 计算double类型所占的内存大小
	int c = sizeof(double);
	cout << b << ' ' << c << endl;
}

// -------------- 整型 -------------------
void c2_1_1_zhengxing(){
	// 短整型
	short a = 32;	
	// 整型
	int b = 42;
	// 长整型
	long c = 52;
	// 长长整型
	long long d = 67;


	cout << a << ' ' << b << ' ' << c << ' ' << d << ' ' << endl;
}

// -------------- 浮点型 -------------------
void c2_1_1_fudianxing(){
	// 单精度浮点型；7位有效数字,后面需要加f，不然默认为双精度的，然后经过float再转换成单精度
	float a = 3.8f;
	// 双精度浮点型；15-16位有效数字
	double b = 3.15;
	
	// 默认情况下输出显示6位有效数字
	cout << a << ' ' << b << endl;
}

// -------------- 字符型 -------------------
void c2_1_1_zifuxing() {
	// 字符型：存放基础字符集ascll码
	char a = 'c';
	// 宽字符型：存放扩展字符集,
	wchar_t b = 'a';
	char16_t c = 'd';
	char32_t d = 'e';

	// 直接输出char类型的变量，能显示字符，但是wchar_t、char16_t等会显示编码数字
	cout << a << ' ' << b<< ' '<< c << endl;
}

// -------------- 布尔型 -------------------
void c2_1_1_buerxing() {
	bool a = true;
	bool b = false;

	// 输出显示的话，会显示bool的本质值。0或者1
	cout << a << ' ' << b << endl;
}

// -------------- 带符号数据类型 -------------------
void c2_1_1_daifuhaoshujuleixing() { // - **布尔型、扩展字符型、浮点型**没有无符号类型和符号类型的划分
	// 整型int、short、long、long long带无符号类型
	unsigned int a = 22;
	unsigned short b = 23;
	unsigned long c = 24;
	unsigned long long d = 25;
	// 整型int、short、long、long long带符号类型
	int a1 = 12;
	short b2 = 13;
	long c2 = 14;
	long long d2 = 15;

	// char字符型无符号类型
	unsigned char e = 'a';

	// char字符型有符号类型
	signed char e1 = 'b';
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 2.1.2 类型转换 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// 详细转到第四章详解

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 2.1.2 字面值常量 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// -------------- 整型、浮点型、字符、字符串、布尔、指针字面值 -------------------
void c2_1_2zimainzhi() {
	// 整型 十进制、八进制、十六进制
	int a = 10;  
	int b = 024; 
	int c = 0xcf;
	// 浮点型
	double d = 0.2;
	// 字符型
	char e = 'a';
	// 字符串型
	cout << "hello world" << endl;
	// 布尔型
	bool f = false;
	// 指针
	int* p = nullptr;
}

// -------------- 指定字面值的类型 -------------------
void c2_1_2zhidingleixing() {
	// 字符和字符串
	char16_t a = u'a';
	char32_t b = U'b';
	wchar_t c = L'c';
	string d = u8"hello world";

	// 整型
	unsigned int e = 13u;
	long f = 14l;
	long long g = 15ll;

	// 浮点型
	float h = 1.23f;
	long double i = 1.45l;
}

// -------------- 转义字符 -------------------
void c2_1_2zhuanyizifu() {
	// C++规定的转义字符
	cout << 'a' << '\n' << '\t' << 'b' << endl;
	// 泛化转义字符
	cout << 'a' << '\12' << '\40' << 'b' << endl;
}
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
/*
	第二章 第二讲 ：变量
*/
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 2.2.1 定义变量 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void c2_2_1dingyibianliang() {
	// **类型说明符（类型的名字）** +  **变量的名字（标识符）（可以是一个，可以多个变量名组成的列表）**
	string s, d, f, g;
	int a;
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 2.2.2 初始化变量 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void c2_2_2chushihuabianliang() {
	int a = 2;
	int b = { 1 };	//列表初始化
	int c(3);		//列表初始化
	int d{ 4 };		//列表初始化

	cout << a << ' ' << b << ' ' << c << ' ' << d << endl;
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 2.2.3 变量声明与定义 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void c2_2_3bianliangshengmingyudingyi() {
	// 变量的声明
	extern int i;
	// 变量的声明和定义
	int j;
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 2.2.4 标识符规范（变量名） <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// 无

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 2.2.5 名字作用域 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// 无
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
/*
	第二章 第二讲 ：变量
*/
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 2.3.1 引用 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void c2_3_1yinyong() {
	// 定义引用类型，必须初始化
	int a = 10;
	int& b = a; // b是a的别名

	// 通过引用名更改a的值
	b = 20;
	cout << a << endl;
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 2.3.2 指针 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void c2_3_2zhizhen() {
	// 定义指针类型，不用必须初始化
	int a = 10;
	int* b = &a;

	// 通过指针更改a的值
	*b = 20;

	// 将指针转为空指针
	b = 0;	// 或者 b = nullstr;  or   b = NULL;  其实就是把地址的值改为0了，没有地址了  其他地址字面值可以互相复制从而指向该地址所存对象
 
	cout << a << endl;
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 2.3.3 指针的指针 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void c2_3_3zhizhendezhizhen() {
	int a = 10;
	// 定义一个指针指向a
	int* p = &a;
	// 定义一个指向p指针的指针
	int** ppi = &p;
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 2.3.3 指针的引用 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void c2_3_3zhizhendezhizhen() {
	int a = 10;
	// 定义一个指针指向a
	int* p = &a;
	// 定义一个指向p指针的引用
	int *&b = p;
}

int main() {
/*
	第二章 第一讲 ：基本内置类型
*/
	// sizeof_guanjianzi();
	// c2_1_1_zhengxing();
	// c2_1_1_fudianxing();
	// c2_1_1_zifuxing();
	// c2_1_1_buerxing();
	// c2_1_1_daifuhaoshujuleixing();

	// c2_1_2zimainzhi();
	// c2_1_2zhidingleixing();
	// c2_1_2zhuanyizifu();

/*
	第二章 第二讲 ：变量
*/
	// c2_2_1dingyibianliang();
	// c2_2_2chushihuabianliang();
	// c2_2_3bianliangshengmingyudingyi();

/*
	第二章 第二讲 ：变量
*/
	// c2_3_1yinyong();
	c2_3_2zhizhen();

	system("pause");
	return 0;
}

